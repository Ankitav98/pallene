#!/usr/bin/env lua

local argparse = require "argparse"

local c_compiler = require "titan-compiler.c_compiler"
local util = require "titan-compiler.util"


local p = argparse("titan", "Titan compiler")
p:argument("source_file", "File to compile")
p:flag("--emit-c", "Generate a .c file instead of an .so file")
p:flag("--compile-c", "Compile a .c file generated by --emit-c")
local args = p:parse()

--
--
--

local function abort(msg)
    io.stderr:write(msg, "\n")
    os.exit(1)
end

-- For compilation errors that don't happen inside a source file.
-- Inspired by gcc, eg. "gcc: fatal error: no input files".
local function titanc_abort(msg)
    local titanc_err_prefix = arg[0] .. ": "
    return abort(titanc_err_prefix .. msg)
end

local function check_source_filename(expected_ext)
    local name, ext = util.split_ext(args.source_file)
    if ext ~= expected_ext then
        titanc_abort(string.format(
            "filename should have a .%s extension", expected_ext))
    end
    if not string.match(name, "^[a-zA-Z0-9_/]+$") then
        titanc_abort("filename must not include special characters")
    end
    return name
end

local function get_source_file_contents()
    local input, err = util.get_file_contents(args.source_file)
    if not input then
        titanc_abort(err)
    end
    return input
end

local function titanc_call(f, ...)
    local ok, errs = f(...)
    if not ok then
        abort(table.concat(errs, "\n"))
    end
end

--
--
--

local function compile_titan_to_so()
    local name = check_source_filename("titan")
    local so_filename = name .. ".so"
    local input = get_source_file_contents()
    titanc_call(c_compiler.compile_titan_to_so,
        args.source_file, input, so_filename)
end

local function compile_titan_to_c()
    local name = check_source_filename("titan")
    local c_filename = name .. ".c"
    local input = get_source_file_contents()
    titanc_call(c_compiler.compile_titan_to_c,
        args.source_file, input, c_filename)
end

local function compile_c_to_so()
    local name = check_source_filename("c")
    local so_filename = name .. ".so"
    titanc_call(c_compiler.compile_c_to_so,
        args.source_file, so_filename)
end

if     not args.emit_c and not args.compile_c then
    compile_titan_to_so() -- Default case
elseif     args.emit_c and not args.compile_c then
    compile_titan_to_c()
elseif not args.emit_c and     args.compile_c then
    compile_c_to_so()
elseif     args.emit_c and     args.compile_c then
    titanc_abort("--emit-c and --compile-c flags are mutually exclusive")
end

