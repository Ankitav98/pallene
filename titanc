#!/usr/bin/env lua

local argparse = require "argparse"

local c_compiler = require "titan-compiler.c_compiler"
local parser = require "titan-compiler.parser"
local util = require "titan-compiler.util"


-- For compilation errors that don't happen inside a source file.
-- Inspired by gcc, eg. "gcc: fatal error: no input files".
local titanc_err_prefix = arg[0] .. ": "

local function abort(msg)
    io.stderr:write(msg, "\n")
    os.exit(1)
end


local p = argparse("titan", "Titan compiler")
p:argument("source_file", "Titan source file to compile."):args(1)

local args = p:parse()

if not string.match(args.source_file, "%.titan$") then
    abort(titanc_err_prefix .. "filename should have a .titan extension")
end
if not string.match(args.source_file, "^[a-zA-Z0-9_/]+%.titan$") then
    abort(titanc_err_prefix .. "filename must not include special characters")
end
local input, err = util.get_file_contents(args.source_file)
if not input then
    abort(titanc_err_prefix .. err)
end

local ok, errors = c_compiler.compile_titan(args.source_file, input)
if not ok then
    abort(table.concat(errors, "\n"))
end
